using System;
using System.Linq;
using DTOMaker.SrcGen.Core;
namespace DTOMaker.SrcGen.CSPoco;
#pragma warning disable CS0162 // Unreachable code detected
public sealed class EntityGenerator : EntityGeneratorBase
{
    public EntityGenerator(ILanguage language) : base(language) { }
    protected override void OnGenerate(ModelScopeEntity entity)
    {
        Emit("// <auto-generated>");
        Emit("// This file was generated by DTOMaker.CSPoco.");
        Emit("// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco");
        Emit("// Warning: Changes made to this file will be lost if re-generated.");
        Emit("// </auto-generated>");
        if (false)
        {
            Emit("#pragma warning disable CS0618 // Type or member is obsolete");
            Emit("#pragma warning disable CS0162 // Unreachable code detected");
        }
        Emit("#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required");
        Emit("#nullable enable");
        Emit("using DataFac.Memory;");
        Emit("using DTOMaker.Runtime;");
        Emit("using DTOMaker.Runtime.CSPoco;");
        Emit("using System;");
        Emit("");
        if (false)
        {
            Emit("using T_MemberType_ = System.Int32;");
            Emit("namespace T_MemberTypeNameSpace_");
            Emit("{");
            Emit("    public interface IT_MemberTypeIntfName_ { }");
            Emit("}");
            Emit("namespace T_MemberTypeNameSpace_.CSPoco");
            Emit("{");
            Emit("    public class T_MemberTypeImplName_ : EntityBase, IT_MemberTypeIntfName_");
            Emit("    {");
            Emit("        protected override int OnGetEntityId() => 3;");
            Emit("");
            Emit("        private static T_MemberTypeImplName_ CreateEmpty()");
            Emit("        {");
            Emit("            var empty = new T_MemberTypeImplName_();");
            Emit("            empty.Freeze();");
            Emit("            return empty;");
            Emit("        }");
            Emit("        private static readonly T_MemberTypeImplName_ _empty = CreateEmpty();");
            Emit("        public static new T_MemberTypeImplName_ Empty => _empty;");
            Emit("");
            Emit("        public static T_MemberTypeImplName_ CreateFrom(IT_MemberTypeIntfName_ source) => throw new NotImplementedException();");
            Emit("        public T_MemberTypeImplName_() { }");
            Emit("        public T_MemberTypeImplName_(IT_MemberTypeIntfName_ source) { }");
            Emit("        protected override IEntityBase OnPartCopy() => throw new NotImplementedException();");
            Emit("    }");
            Emit("}");
            Emit("namespace T_BaseNameSpace_");
            Emit("{");
            Emit("    public interface IT_BaseName_ : IEntityBase { }");
            Emit("}");
            Emit("namespace T_BaseNameSpace_.CSPoco");
            Emit("{");
            Emit("    public class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>");
            Emit("    {");
            Emit("        protected override int OnGetEntityId() => 2;");
            Emit("");
            Emit("        private static T_BaseName_ CreateEmpty()");
            Emit("        {");
            Emit("            var empty = new T_BaseName_();");
            Emit("            empty.Freeze();");
            Emit("            return empty;");
            Emit("        }");
            Emit("        private static readonly T_BaseName_ _empty = CreateEmpty();");
            Emit("        public static new T_BaseName_ Empty => _empty;");
            Emit("");
            Emit("        public T_BaseName_() { }");
            Emit("        public T_BaseName_(IT_BaseName_ source) : base(source) { }");
            Emit("        public T_BaseName_(T_BaseName_ source) : base(source) { }");
            Emit("");
            Emit("        protected override void OnFreeze() => base.OnFreeze();");
            Emit("        protected override IEntityBase OnPartCopy() => throw new NotImplementedException();");
            Emit("");
            Emit("        public T_MemberType_ BaseField1 { get; set; }");
            Emit("");
            Emit("        public bool Equals(T_BaseName_? other)");
            Emit("        {");
            Emit("            if (ReferenceEquals(this, other)) return true;");
            Emit("            if (other is null) return false;");
            Emit("            if (!base.Equals(other)) return false;");
            Emit("            return true;");
            Emit("        }");
            Emit("        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);");
            Emit("        public override int GetHashCode() => base.GetHashCode();");
            Emit("    }");
            Emit("}");
            Emit("namespace T_NameSpace_");
            Emit("{");
            Emit("    public interface IT_EntityIntfName_ : T_BaseNameSpace_.IT_BaseName_");
            Emit("    {");
            Emit("        T_MemberType_? T_NullableScalarMemberName_ { get; set; }");
            Emit("        T_MemberType_ T_RequiredScalarMemberName_ { get; set; }");
            Emit("        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }");
            Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? T_NullableEntityMemberName_ { get; set; }");
            Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ T_RequiredEntityMemberName_ { get; set; }");
            Emit("        Octets? T_NullableBinaryMemberName_ { get; set; }");
            Emit("        Octets T_RequiredBinaryMemberName_ { get; set; }");
            Emit("        string? T_NullableStringMemberName_ { get; set; }");
            Emit("        string T_RequiredStringMemberName_ { get; set; }");
            Emit("    }");
            Emit("}");
        }
        Emit("namespace T_NameSpace_.CSPoco");
        Emit("{");
        if (false)
        {
        }
        Emit("    public partial class T_EntityImplName_ : T_BaseNameSpace_.CSPoco.T_BaseName_, IT_EntityIntfName_, IEquatable<T_EntityImplName_>");
        Emit("    {");
        Emit("        // Derived entities: T_DerivedEntityCount_");
        foreach (var derived in entity.DerivedEntities)
        {
            using var _ = NewScope(derived);
            Emit("        // - T_EntityImplName_");
        }
        if (false)
        {
            Emit("        private const string T_MemberObsoleteMessage_ = null;");
            Emit("        private const bool T_MemberObsoleteIsError_ = false;");
            Emit("        private const int T_MemberDefaultValue_ = 0;");
            Emit("        private const int T_EntityId_ = 1;");
        }
        Emit("");
        Emit("        protected override int OnGetEntityId() => T_EntityId_;");
        Emit("");
        Emit("        private static T_EntityImplName_ CreateEmpty()");
        Emit("        {");
        Emit("            var empty = new T_EntityImplName_();");
        Emit("            empty.Freeze();");
        Emit("            return empty;");
        Emit("        }");
        Emit("        private static readonly T_EntityImplName_ _empty = CreateEmpty();");
        Emit("        public static new T_EntityImplName_ Empty => _empty;");
        Emit("");
        Emit("        public new static T_EntityImplName_ CreateFrom(T_EntityImplName_ source)");
        Emit("        {");
        Emit("            if (source.IsFrozen) return source;");
        Emit("            return source switch");
        Emit("            {");
        foreach (var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight))
        {
            using var _ = NewScope(derived);
            Emit("                T_NameSpace_.CSPoco.T_EntityImplName_ source2 => new T_NameSpace_.CSPoco.T_EntityImplName_(source2),");
        }
        Emit("                _ => new T_NameSpace_.CSPoco.T_EntityImplName_(source)");
        Emit("            };");
        Emit("        }");
        Emit("");
        Emit("        public new static T_EntityImplName_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)");
        Emit("        {");
        Emit("            if (source is T_EntityImplName_ concrete && concrete.IsFrozen) return concrete;");
        Emit("            return source switch");
        Emit("            {");
        foreach (var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight))
        {
            using var _ = NewScope(derived);
            Emit("                T_NameSpace_.IT_EntityIntfName_ source2 => new T_NameSpace_.CSPoco.T_EntityImplName_(source2),");
        }
        Emit("                _ => new T_NameSpace_.CSPoco.T_EntityImplName_(source)");
        Emit("            };");
        Emit("        }");
        Emit("");
        Emit("        protected override void OnFreeze()");
        Emit("        {");
        Emit("            base.OnFreeze();");
        foreach (var member in entity.Members)
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    break;
                case MemberKind.Vector:
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableEntityMemberName_?.Freeze();");
                    }
                    else
                    {
                        Emit("            _T_RequiredEntityMemberName_.Freeze();");
                    }
                    break;
                case MemberKind.Binary:
                    break;
                case MemberKind.String:
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("        }");
        Emit("");
        Emit("        protected override IEntityBase OnPartCopy() => new T_EntityImplName_(this);");
        Emit("");
        Emit("        public T_EntityImplName_() { }");
        Emit("        public T_EntityImplName_(IT_EntityIntfName_ source) : base(source)");
        Emit("        {");
        foreach (var member in entity.Members)
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableScalarMemberName_ = source.T_NullableScalarMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredScalarMemberName_ = source.T_RequiredScalarMemberName_;");
                    }
                    break;
                case MemberKind.Vector:
                    Emit("            _T_VectorMemberName_ = source.T_VectorMemberName_;");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);");
                    }
                    else
                    {
                        Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_;");
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableStringMemberName_ = source.T_NullableStringMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredStringMemberName_ = source.T_RequiredStringMemberName_;");
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        } // foreach
        Emit("        }");
        Emit("        public T_EntityImplName_(T_EntityImplName_ source) : base(source)");
        Emit("        {");
        foreach (var member in entity.Members)
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableScalarMemberName_ = source._T_NullableScalarMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredScalarMemberName_ = source._T_RequiredScalarMemberName_;");
                    }
                    break;
                case MemberKind.Vector:
                    Emit("            _T_VectorMemberName_ = source._T_VectorMemberName_;");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredEntityMemberName_ = source._T_RequiredEntityMemberName_;");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableBinaryMemberName_ = source._T_NullableBinaryMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredBinaryMemberName_ = source._T_RequiredBinaryMemberName_;");
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableStringMemberName_ = source._T_NullableStringMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredStringMemberName_ = source._T_RequiredStringMemberName_;");
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        } // foreach
        Emit("        }");
        Emit("");
        foreach (var member in entity.Members)
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    if (member.IsNullable)
                    {
                        Emit("        private T_MemberType_? _T_NullableScalarMemberName_;");
                    }
                    else
                    {
                        Emit("        private T_MemberType_ _T_RequiredScalarMemberName_ = T_MemberDefaultValue_;");
                    }
                    if (member.IsObsolete)
                    {
                        Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                    }
                    if (member.IsNullable)
                    {
                        Emit("        public T_MemberType_? T_NullableScalarMemberName_");
                        Emit("        {");
                        Emit("            get => _T_NullableScalarMemberName_;");
                        Emit("            set => _T_NullableScalarMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                    }
                    else
                    {
                        Emit("        public T_MemberType_ T_RequiredScalarMemberName_");
                        Emit("        {");
                        Emit("            get => _T_RequiredScalarMemberName_;");
                        Emit("            set => _T_RequiredScalarMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                    }
                    break;
                case MemberKind.Vector:
                    Emit("        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;");
                    if (member.IsObsolete)
                    {
                        Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                    }
                    Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
                    Emit("        {");
                    Emit("            get => _T_VectorMemberName_;");
                    Emit("            set => _T_VectorMemberName_ = IfNotFrozen(value);");
                    Emit("        }");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("        private T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_? _T_NullableEntityMemberName_;");
                        Emit("        public T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_? T_NullableEntityMemberName_");
                        Emit("        {");
                        Emit("            get => _T_NullableEntityMemberName_;");
                        Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                        Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_");
                        Emit("        {");
                        Emit("            get => _T_NullableEntityMemberName_;");
                        Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null : T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_.CreateFrom(value));");
                        Emit("        }");
                    }
                    else
                    {
                        Emit("        private T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_.Empty;");
                        Emit("        public T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_ T_RequiredEntityMemberName_");
                        Emit("        {");
                        Emit("            get => _T_RequiredEntityMemberName_;");
                        Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                        Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_");
                        Emit("        {");
                        Emit("            get => _T_RequiredEntityMemberName_;");
                        Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.CSPoco.T_MemberTypeImplName_.CreateFrom(value));");
                        Emit("        }");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        Emit("        private Octets? _T_NullableBinaryMemberName_;");
                        Emit("        public Octets? T_NullableBinaryMemberName_");
                        Emit("        {");
                        Emit("            get => _T_NullableBinaryMemberName_;");
                        Emit("            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                    }
                    else
                    {
                        Emit("        private Octets _T_RequiredBinaryMemberName_ = Octets.Empty;");
                        Emit("        public Octets T_RequiredBinaryMemberName_");
                        Emit("        {");
                        Emit("            get => _T_RequiredBinaryMemberName_;");
                        Emit("            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        Emit("        private string? _T_NullableStringMemberName_;");
                        Emit("        public string? T_NullableStringMemberName_");
                        Emit("        {");
                        Emit("            get => _T_NullableStringMemberName_;");
                        Emit("            set => _T_NullableStringMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                    }
                    else
                    {
                        Emit("        private string _T_RequiredStringMemberName_ = string.Empty;");
                        Emit("        public string T_RequiredStringMemberName_");
                        Emit("        {");
                        Emit("            get => _T_RequiredStringMemberName_;");
                        Emit("            set => _T_RequiredStringMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
            Emit("");
        }
        Emit("");
        Emit("        public bool Equals(T_EntityImplName_? other)");
        Emit("        {");
        Emit("            if (ReferenceEquals(this, other)) return true;");
        Emit("            if (other is null) return false;");
        Emit("            if (!base.Equals(other)) return false;");
        foreach (var member in entity.Members)
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    if (member.IsNullable)
                    {
                        Emit("            if (_T_NullableScalarMemberName_ != other.T_NullableScalarMemberName_) return false;");
                    }
                    else
                    {
                        Emit("            if (_T_RequiredScalarMemberName_ != other.T_RequiredScalarMemberName_) return false;");
                    }
                    break;
                case MemberKind.Vector:
                    Emit("            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            if (_T_NullableEntityMemberName_ != other.T_NullableEntityMemberName_) return false;");
                    }
                    else
                    {
                        Emit("            if (_T_RequiredEntityMemberName_ != other.T_RequiredEntityMemberName_) return false;");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        Emit("            if (_T_NullableBinaryMemberName_ != other.T_NullableBinaryMemberName_) return false;");
                    }
                    else
                    {
                        Emit("            if (_T_RequiredBinaryMemberName_ != other.T_RequiredBinaryMemberName_) return false;");
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        Emit("            if (_T_NullableStringMemberName_ != other.T_NullableStringMemberName_) return false;");
                    }
                    else
                    {
                        Emit("            if (_T_RequiredStringMemberName_ != other.T_RequiredStringMemberName_) return false;");
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("            return true;");
        Emit("        }");
        Emit("");
        Emit("        public override bool Equals(object? obj) => obj is T_EntityImplName_ other && Equals(other);");
        Emit("        public static bool operator ==(T_EntityImplName_? left, T_EntityImplName_? right) => left is not null ? left.Equals(right) : (right is null);");
        Emit("        public static bool operator !=(T_EntityImplName_? left, T_EntityImplName_? right) => left is not null ? !left.Equals(right) : (right is not null);");
        Emit("");
        Emit("        private int CalcHashCode()");
        Emit("        {");
        Emit("            HashCode result = new HashCode();");
        Emit("            result.Add(base.GetHashCode());");
        foreach (var member in entity.Members)
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    if (member.IsNullable)
                    {
                        Emit("            result.Add(_T_NullableScalarMemberName_);");
                    }
                    else
                    {
                        Emit("            result.Add(_T_RequiredScalarMemberName_);");
                    }
                    break;
                case MemberKind.Vector:
                    Emit("            result.Add(_T_VectorMemberName_.Length);");
                    Emit("            for (int i = 0; i < _T_VectorMemberName_.Length; i++)");
                    Emit("            {");
                    Emit("                result.Add(_T_VectorMemberName_.Span[i]);");
                    Emit("            }");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            result.Add(_T_NullableEntityMemberName_);");
                    }
                    else
                    {
                        Emit("            result.Add(_T_RequiredEntityMemberName_);");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        Emit("            result.Add(_T_NullableBinaryMemberName_);");
                    }
                    else
                    {
                        Emit("            result.Add(_T_RequiredBinaryMemberName_);");
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        Emit("            result.Add(_T_NullableStringMemberName_);");
                    }
                    else
                    {
                        Emit("            result.Add(_T_RequiredStringMemberName_);");
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("            return result.ToHashCode();");
        Emit("        }");
        Emit("");
        Emit("        private int? _hashCode;");
        Emit("        public override int GetHashCode()");
        Emit("        {");
        Emit("            if (!IsFrozen) return CalcHashCode();");
        Emit("            if (_hashCode.HasValue) return _hashCode.Value;");
        Emit("            _hashCode = CalcHashCode();");
        Emit("            return _hashCode.Value;");
        Emit("        }");
        Emit("");
        Emit("    }");
        Emit("}");
    }
}